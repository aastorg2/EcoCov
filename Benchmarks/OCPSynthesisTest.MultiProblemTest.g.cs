// <copyright file="OCPSynthesisTest.MultiProblemTest.g.cs">Copyright ? 2009</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;
using System.Collections.Generic;

namespace Benchmarks
{
    public partial class OCPSynthesisTest
    {
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException500()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException521()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException79()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException83()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException93()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException776()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException131()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException511()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException848()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException332()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    List<int> list = new List<int>();
    choices.NextSegment(1).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: assumption violation")]
public void MultiProblemTestThrowsArgumentNullException352()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    list = new List<int>((IEnumerable<int>)null);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest624()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void MultiProblemTestThrowsMinimizationRequestException919()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62401()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException863()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException458()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException566()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException423()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException631()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    List<int> list = new List<int>();
    choices.NextSegment(1).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: assumption violation")]
public void MultiProblemTestThrowsArgumentNullException655()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    list = new List<int>((IEnumerable<int>)null);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62402()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[0];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void MultiProblemTestThrowsMinimizationRequestException35()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62403()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[1];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException972()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62404()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(1, "ocpsymbolic", (object)list)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: duplicate path")]
public void MultiProblemTestThrowsPexRetryException794()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    List<int> list1 = new List<int>();
    choices.NextSegment(2).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void MultiProblemTestThrowsMinimizationRequestException402()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    List<int> list1;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    list1 = new List<int>((IEnumerable<int>)null);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(3).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: assumption violation")]
public void MultiProblemTestThrowsArgumentNullException374()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    List<int> list1;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    list1 = new List<int>((IEnumerable<int>)null);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(3).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: minimization request")]
public void MultiProblemTestThrowsMinimizationRequestException495()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    List<int> list1;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    int[] ints1 = new int[6];
    list1 = new List<int>((IEnumerable<int>)ints1);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(3).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62405()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    List<int> list1;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    int[] ints1 = new int[1];
    list1 = new List<int>((IEnumerable<int>)ints1);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(3).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
public void MultiProblemTest62406()
{
    OCPSynthesisTest.Multi multi;
    List<int> list;
    List<int> list1;
    multi = new OCPSynthesisTest.Multi();
    int[] ints = new int[6];
    list = new List<int>((IEnumerable<int>)ints);
    int[] ints1 = new int[0];
    list1 = new List<int>((IEnumerable<int>)ints1);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(3).DefaultSession
        .At(1, "ocpsymbolic", (object)list1)
        .At(0, "ocpsymbolic", (object)list);
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException332()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException940()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException247()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException53()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException537()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException695()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException656()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException57()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException608()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException971()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException317()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException278()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException317()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException140()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException745()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException340()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException903()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException937()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException629()
{
    OCPSynthesisTest.MultiProblemTest((OCPSynthesisTest.Multi)null);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[Ignore]
[PexDescription("the test state was: retry")]
public void MultiProblemTestThrowsPexRetryException534()
{
    OCPSynthesisTest.Multi multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
[TestMethod]
[PexGeneratedBy(typeof(OCPSynthesisTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void MultiProblemTestThrowsNullReferenceException766()
{
    OCPSynthesisTest.Multi multi;
    multi = new OCPSynthesisTest.Multi();
    OCPSynthesisTest.MultiProblemTest(multi);
}
    }
}
