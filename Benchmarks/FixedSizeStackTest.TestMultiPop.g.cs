// <copyright file="FixedSizeStackTest.TestMultiPop.g.cs">Copyright ? 2009</copyright>
// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Framework;

namespace Benchmarks
{
    public partial class FixedSizeStackTest
    {
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException704()
{
    this.TestMultiPop((FixedSizeStack)null);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException852()
{
    FixedSizeStack fixedSizeStack;
    fixedSizeStack = new FixedSizeStack((Stack)null);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(Exception))]
public void TestMultiPopThrowsException17()
{
    Stack stack;
    FixedSizeStack fixedSizeStack;
    stack = new Stack();
    fixedSizeStack = new FixedSizeStack(stack);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException64()
{
    this.TestMultiPop((FixedSizeStack)null);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException297()
{
    FixedSizeStack fixedSizeStack;
    fixedSizeStack = new FixedSizeStack((Stack)null);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(Exception))]
public void TestMultiPopThrowsException457()
{
    Stack stack;
    FixedSizeStack fixedSizeStack;
    stack = new Stack();
    fixedSizeStack = new FixedSizeStack(stack);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void TestMultiPopThrowsIndexOutOfRangeException785()
{
    Stack stack;
    FixedSizeStack fixedSizeStack;
    stack = new Stack();
    fixedSizeStack = new FixedSizeStack(stack);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)3);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException956()
{
    this.TestMultiPop((FixedSizeStack)null);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(NullReferenceException))]
public void TestMultiPopThrowsNullReferenceException132()
{
    FixedSizeStack fixedSizeStack;
    fixedSizeStack = new FixedSizeStack((Stack)null);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(Exception))]
public void TestMultiPopThrowsException663()
{
    Stack stack;
    FixedSizeStack fixedSizeStack;
    stack = new Stack();
    fixedSizeStack = new FixedSizeStack(stack);
    this.TestMultiPop(fixedSizeStack);
}
[TestMethod]
[PexGeneratedBy(typeof(FixedSizeStackTest))]
[PexRaisedException(typeof(IndexOutOfRangeException))]
public void TestMultiPopThrowsIndexOutOfRangeException127()
{
    Stack stack;
    FixedSizeStack fixedSizeStack;
    stack = new Stack();
    fixedSizeStack = new FixedSizeStack(stack);
    IPexChoiceRecorder choices = PexChoose.Replay.Setup();
    choices.NextSegment(2).DefaultSession
        .At(0, "ocpsymbolic", (object)3);
    this.TestMultiPop(fixedSizeStack);
}
    }
}
